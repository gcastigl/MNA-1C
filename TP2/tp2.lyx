#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 4cm
\rightmargin 2cm
\bottommargin 4cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Trabajo Práctico 2
\end_layout

\begin_layout Standard
Universidad: ITBA
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Materia: Métodos Numéricos Avanzados
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Integrantes:
\end_layout

\begin_layout Itemize
Castiglione, Gonzalo - 49138
\end_layout

\begin_layout Itemize
Wassington, Axel - 50124
\end_layout

\begin_layout Standard
\align center
\begin_inset Newpage pagebreak
\end_inset


\series bold
\size larger
Procesamiento de imágenes I++
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Abstract
Este informe tiene como objetivo analizar espectralmente una imagen en escala
 de grises y utilizar la transformada discreta de Fourier para realizar
 filtrados espaciales de acuerdo a diversos filtros.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Abstract
A continuación se prensenta la ecuación de la Transformada Discreta de Fourier
 de una secuencia bidimensional 
\begin_inset Formula $x_{n,m}$
\end_inset

 de 
\begin_inset Formula $N×N$
\end_inset

 (imagen), la cual se define como:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
X_{l,k}=\sum_{n=0}^{N-1}\sum_{m=0}^{N-1}x_{n,m}e^{-i\frac{2\pi}{N}(nl+mk)}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Siendo la transformada inversa discreta:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
x_{n,m}=\frac{1}{N^{2}}\sum_{l=0}^{N-1}\sum_{k=0}^{N-1}X_{l,k}e^{i\frac{2\pi}{N}(nl+mk)}
\end{equation}

\end_inset


\end_layout

\begin_layout Section
Implementación
\end_layout

\begin_layout Subsection
Implementación de un programa que computa la TDF 2D.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
El cálculo de la transformada de fourier de una matriz bidimiensional, se
 realiza a partir de la fórmula 
\begin_inset Formula $(2)$
\end_inset

.
 En donde, por cada posición 
\begin_inset Formula $(l,k)$
\end_inset

, se calcula la sumatoria de los valores transformados de toda la matriz.
 
\end_layout

\begin_layout Standard
La implementacion de este algoritmo puede encontrarse en la sección 
\begin_inset Formula $Anexo$
\end_inset

, el en punto 
\begin_inset Formula $(1)$
\end_inset

.
\end_layout

\begin_layout Standard
Una implementación clásica, como la mostrada en el anexo, es inutil para
 una imagen de 400x400 pixeles dado el tiempo que tarda en computarla.
 La funcion fft2() de octave, no solo calcula la transformada de forma rápida
 (utilizando una tecnica de 
\begin_inset Quotes eld
\end_inset

divide and conquer
\begin_inset Quotes erd
\end_inset

; sino que tambien está desarrollada en un lenguaje compilable, y de esa
 forma consigue una performance que no se puede conseguir utilizando las
 otras funciones que ofrece el lenguaje.
\end_layout

\begin_layout Subsection
El archivo 
\emph on
saturno
\emph default
 contiene una matriz de 
\begin_inset Formula $400×400$
\end_inset

 pixeles y corresponde a niveles de intensidad luminosa comprendidos entre
 
\begin_inset Formula $0$
\end_inset

 y 
\begin_inset Formula $255$
\end_inset

.
 
\end_layout

\begin_layout Standard
Para visualizar esta imagen en escala de grises, es necesario establecer
 un mapa de color de 255 niveles.
\end_layout

\begin_layout Standard
Visualización la Figura que muestra una imagen del planeta Saturno, capturada
 por la misión Voyager.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename saturno.png
	lyxscale 30
	scale 25

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Imagen de saturno obtenida a partir de las mediciones
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La implementación del algoritmo para cargar el archivo con los valores leídos
 en la misión 
\begin_inset Formula $Voyager$
\end_inset

 se encuentra en la sección 
\begin_inset Formula $Anexo$
\end_inset

, punto 
\begin_inset Formula $(2)$
\end_inset

.
 
\end_layout

\begin_layout Subsection
Computar la Transformada discreta de Fourier de la imagen original.
 Armar las imágenes de 
\begin_inset Formula $400×400$
\end_inset

 pixeles correspondientes a la amplitud y la fase.
 
\end_layout

\begin_layout Standard
Un problema a considerar previamente a computar las imagenes correspondientes,
 es que la imagen que se esta buscando debe ser construida en escala de
 grises 
\begin_inset Formula $[0,255]$
\end_inset

 y las matrices obtenidas por la transformada de fourier (tanto en el ángulo
 de fase asi como en la amplitud) pueden tomar valores fuera de ese intervalo.
\end_layout

\begin_layout Standard
Para ajustar estos resultados y poder visualizarlos como imagen es escala
 de grsises, se realizó un mapeo de acuerdo al siguiente algoritmo:
\end_layout

\begin_layout LyX-Code
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
M = ...;
\end_layout

\begin_layout LyX-Code
// Se dividen los valores por el max absoulto para ajustarlo al intervalo
 [-1, 1]
\end_layout

\begin_layout LyX-Code
M /= max(abs(M));
\end_layout

\begin_layout LyX-Code
// Como el intervalo es positivo, se suma 1 y divide por 2 para 
\end_layout

\begin_layout LyX-Code
// ajustar a 1 el largo del mismo y dejarlo en [0 1].
\end_layout

\begin_layout LyX-Code
M = (M + 1) / 2;
\end_layout

\begin_layout LyX-Code
// Llegado a este punto, se tienen los valores normalizados, simplemente
\end_layout

\begin_layout LyX-Code
// se los lleva a [0, 255]
\end_layout

\begin_layout LyX-Code
M *= 255;
\end_layout

\begin_layout LyX-Code
// Por ultimo, se realiza un floor sobre todos los valores 
\end_layout

\begin_layout LyX-Code
// para exporesarlos como numeros enteros
\end_layout

\begin_layout LyX-Code
m = floor(M);
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
Para el primer caso, para el cálculo de la amplitud, dada 
\begin_inset Formula $X$
\end_inset

 (transformada de fourier de 
\begin_inset Formula $x$
\end_inset

), simplemente se utilizó el módulo del número complejo obtenido sobre cada
 valor de 
\begin_inset Formula $X$
\end_inset

.
 El código para su cálculo y noramalización puede encontrarse en la sección
 
\begin_inset Formula $Anexo$
\end_inset

, punto 
\begin_inset Formula $(3)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Output=floor(((\frac{absol}{2*maxAbsol})+1/2)*255)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
La imágen obtenida es la siguiente:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename transformada-amplitud.png
	lyxscale 50
	scale 35

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Imagen de la amplitud de cada pixel de la matriz transformada de fourier
 de 
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como se puede ver en la figura 2, hay un grupo de frecuencias muy superiores
 que el resto.
 Por eso esa forma de visualizarlo no mustra demasiado.
 En cambio, utilizando una escala logarítmica:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Output=\frac{255}{log(1+\text{absol})}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
La imágen obtenida es la siguiente:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename transformada-amplitud-log.png
	lyxscale 50
	scale 35

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Imagen logaritmica de la amplitud de cada pixel de la matriz transformada
 de fourier de 
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aplicando dicha fórmula, se obtiene una visualizacion más interesante ya
 que se puede distinguir (ademas del pico de frecuencia central) una trama
 en el resto de las frecuencias.
\end_layout

\begin_layout Standard

\emph on
Nota: Ambas imagenes de la amplitud de la frecuencia estan 
\begin_inset Quotes eld
\end_inset

shifteadas
\begin_inset Quotes erd
\end_inset

 para que la frecuencia 0 quede en el centro.
\emph default

\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Para el segundo caso, para el cálculo de la fase, simplemente se utilizó
 el argumento del número complejo obtenido sobre cada valor de 
\begin_inset Formula $X$
\end_inset

.
 El resto del procedimiento es análogo al cálculo de la amplitud.
 Nuevamente, el código que lo realiza puede ser encontrado en la sección
 
\begin_inset Formula $Anexo$
\end_inset

, punto 3.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
La imágen obtenida es la siguiente:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename fase.png
	lyxscale 30
	scale 35

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Imagen de la fase de cada pixel de la matriz transformada de fourier de
 
\begin_inset Formula $x$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\begin_layout Standard
La matriz con los valores obtenidos para la amplitud y para la fase, pueden
 encontrarse en los archivos 
\begin_inset Formula $absolutos.mat$
\end_inset

 y 
\begin_inset Formula $argumentos.mat$
\end_inset

 respectivamente.
\end_layout

\begin_layout Subsection
Computar la Transformada inversa para reconstruir la imagen original de
 
\begin_inset Formula $400×400$
\end_inset

 pixeles.
\end_layout

\begin_layout Standard
Luego de aplicada la fórmula 
\begin_inset Formula $(2)$
\end_inset

 sobre la matriz de la transformada de Fourier y reconstruida la imágen,
 como era de esperarse, se obtuvo nuevamente la imagen original.
\end_layout

\begin_layout Standard
El código que se encuentra en el punto 
\begin_inset Formula $(4)$
\end_inset

 de la sección 
\begin_inset Formula $Anexo$
\end_inset

, muestra una implementación para la anti-transformada de Fourier.
\end_layout

\begin_layout Subsection
Considerar el efecto que producen los siguientes filtros 
\begin_inset Formula $H_{k,l}$
\end_inset

 de 
\begin_inset Formula $400×400$
\end_inset

 pixeles en el dominio de las frecuencias (espaciales):
\end_layout

\begin_layout Standard
Debido a la simplicidad de las condiciones de cada filtro, el código utilizado
 no se presenta sobre este informe pero puede ser encontrado en los archivos
 
\begin_inset Formula $filtro1.m$
\end_inset

, 
\begin_inset Formula $filtroGauss.m$
\end_inset

 y 
\begin_inset Formula $filtroDamero.m$
\end_inset


\end_layout

\begin_layout Subsubsection
Filtro 1
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
H_{k,l}=\begin{cases}
0 & 0\leq k\leq400,\text{ }190\leq l\mathbf{\leq}210\\
1 & 0\leq l\leq400,190\leq k\mathbf{\leq}210\\
1 & ,\text{ en todo otro caso}
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
Resultado:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename 1.png
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Imagen obtenida luego aplicado el filtro 1 sobre la matriz transformada
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tambien conocido como 
\begin_inset Quotes eld
\end_inset

filtro notch
\begin_inset Quotes erd
\end_inset

.
 Este filtro no permite el paso de señales cuyas frecuencias se encuentran
 comprendidas entre las frecuencias de corte superior e inferior.
 Se utiliza para eliminar interferancia destructiva, encontrar patrones
 en una imagen o eliminar patrones.
 En este caso se puede ver (sobre todo en los puntos negros y blancos) como
 se repite el patron cruz a lo largo y ancho de la imagen.
\end_layout

\begin_layout Subsubsection
Filtro Gaussiano 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
H_{k,l}=exp(-0.1(k^{2}+l^{2}))
\]

\end_inset


\end_layout

\begin_layout Standard
Resultado:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename gaus.png
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Imagen obtenida luego aplicado el filtro Gaussiano sobre la matriz transformada
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tambien conocido como 
\begin_inset Quotes eld
\end_inset

desenfoque gausiano
\begin_inset Quotes erd
\end_inset

.
 Este filtro mezcla ligeramente los colores de los píxeles que estén vecinos
 el uno al otro, en un mapa de bits (imagen), haciendo que la imagen pierda
 algunos detalles minúsculos, y de esta forma, hace que la imagen se vea
 más suave.
 Se uso un desenfoque muy exagerado, haciendo que apenas se distinga la
 zona más clara de la imagen de la más oscura.
 Justamente, una de las utilidades de este filtro es la búsqueda de bordes.
\end_layout

\begin_layout Subsubsection
Filtro Dámero
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
H_{k,l}=\begin{cases}
0 & l+k\text{ es par}\\
1 & l+k\text{ es impar}
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
Resultado:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename damero.png
	lyxscale 30
	scale 30

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Imagen obtenida luego aplicado el filtro Dámero sobre la matriz transformada
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Conclusión
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Luego de analizados los resultados obtenidos con la transformada discreta
 de fourier.
 Resulta muy notable la cantidad de áreas en donde esta técnica podría tener
 aplicaciones ya que permite realizar filtrado de imágenes.
 Especialmente en el área de la informática.
\end_layout

\begin_layout Standard
Un problema que se encontró en esta implementación del algoritmo, es la
 notable cantidad de procesamiento requerido para la aplicación de filtros
 para una imagen relativamente pequeña (encima en blano y negro!).
 Es por eso que se recomienda el uso de la 
\begin_inset Formula $FFT$
\end_inset

 (trasformada rápida de Fourier), la cual agiliza muchisimo estos cálculos.
\end_layout

\begin_layout Standard
Los filtros pueden tener variadas utilidades.
 Se pueden uasar para hacer desde efectos sencillos a efectos complejos.
 Muchos son conocidos y se conocen muchas de sus utilidades, pero otros
 son nuevos y aún tienen utilidades desconocidas o incomprensibles.
\end_layout

\begin_layout Standard
El filtrado de imágenes resulta un tema complejo e interesante.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Anexo
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsection
Cálculo de transformada de Fourier discreta
\end_layout

\begin_layout Standard
Lo que esta pieza de código realiza es iterar por cada uno de los pixeles
 
\begin_inset Formula $(l,k)$
\end_inset

 de la matriz de transformación de fourier, y calcula su valor de acuerdo
 a la sumatoria por cada pixel 
\begin_inset Formula $n,m$
\end_inset

 con los valores transformados de la matriz original.
 Esta implementación asume que la matriz es cuadrada de 
\begin_inset Formula $NxN$
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout LyX-Code
\begin_inset listings
lstparams "extendedchars=true,frameshape={RY},keywordstyle={\color{blue}},language=Octave,numbers=left,numberstyle={\scriptsize},stepnumber=1,tabsize=4"
inline false
status open

\begin_layout LyX-Code

function transform = tdf2d(matrix)
\end_layout

\begin_layout LyX-Code

	N = rows(matrix);
\end_layout

\begin_layout LyX-Code

	transform = zeros(N,N);
\end_layout

\begin_layout LyX-Code

	aux = -i * 2 * pi / N;
\end_layout

\begin_layout LyX-Code

	for l = 1 : N
\end_layout

\begin_layout LyX-Code

		for k = 1 : N
\end_layout

\begin_layout LyX-Code

			for n = 1 : N
\end_layout

\begin_layout LyX-Code

				for m = 1 : N
\end_layout

\begin_layout LyX-Code

					c = e ** (aux * ((n-1) * (l-1) + (m-1) * (k-1)));
\end_layout

\begin_layout LyX-Code

					transform(l, k) += matrix(n, m) * c;
\end_layout

\begin_layout LyX-Code

			    endfor
\end_layout

\begin_layout LyX-Code

		    endfor
\end_layout

\begin_layout LyX-Code

		endfor
\end_layout

\begin_layout LyX-Code

	endfor
\end_layout

\begin_layout LyX-Code

endfunction
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Contrucción de la imagen de saturno a partir del archivo 
\begin_inset Formula $"saturno.txt"$
\end_inset


\end_layout

\begin_layout Standard
Cárga de los datos de la matriz 
\begin_inset Formula $saturno.txt$
\end_inset

 a una imagen de escala de grises de 
\begin_inset Formula $0$
\end_inset

 a 
\begin_inset Formula $255$
\end_inset

.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset listings
lstparams "extendedchars=true,frameshape={RY},keywordstyle={\color{blue}},language=Octave,numbers=left,numberstyle={\scriptsize},stepnumber=1,tabsize=4"
inline false
status open

\begin_layout LyX-Code

x=load('saturno.txt');
\end_layout

\begin_layout LyX-Code

colormap(gray(255)); 
\end_layout

\begin_layout LyX-Code

image(x');
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Computar la Transformada discreta de Fourier de la imagen original
\end_layout

\begin_layout Standard
Cálculo de la imagen producida por el valor de la 
\begin_inset Formula $amplitud$
\end_inset

(módulo del complejo) de cada valor de la matriz transformada:
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset listings
lstparams "frameshape={RY},keywordstyle={\color{blue}},language=Octave,numbers=left,numberstyle={\scriptsize},stepnumber=1,tabsize=4"
inline false
status open

\begin_layout LyX-Code

absol = abs(Tx);
\end_layout

\begin_layout LyX-Code

absol2 = absol / max(max(abs(absol)));
\end_layout

\begin_layout LyX-Code

absol2 = ((absol2 + 1) / 2) * 255;
\end_layout

\begin_layout LyX-Code

absol2 = floor(absol2);
\end_layout

\begin_layout LyX-Code

colormap(gray(255)); 
\end_layout

\begin_layout LyX-Code

image(absol2');
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cálculo de la imagen producida por el valor de la 
\begin_inset Formula $fase$
\end_inset

 (argumento del complejo) de cada valor de la matriz transformada:
\end_layout

\begin_layout LyX-Code
\begin_inset listings
lstparams "extendedchars=true,frameshape={RY},keywordstyle={\color{blue}},language=Octave,numbers=left,numberstyle={\footnotesize},stepnumber=1,tabsize=4"
inline false
status open

\begin_layout LyX-Code

args = arg(Tx);
\end_layout

\begin_layout LyX-Code

args2 = args / max(max(abs(args)));
\end_layout

\begin_layout LyX-Code

args2 = ((args2 + 1) / 2) * 255;
\end_layout

\begin_layout LyX-Code

args2 = floor(args2);
\end_layout

\begin_layout LyX-Code

colormap(gray(255)); 
\end_layout

\begin_layout LyX-Code

image(args2');
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Computar la Transformada inversa para reconstruir la imagen original de
 
\begin_inset Formula $400×400$
\end_inset

 pixeles.
\end_layout

\begin_layout Standard
Algoritmo para el cálculo de la anti-transformada discreta de Fourier dada
 una matriz cuadrada 
\begin_inset Formula $NxN$
\end_inset

.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset listings
lstparams "extendedchars=true,frameshape={RY},keywordstyle={\color{blue}},language=Octave,numbers=left,numberstyle={\footnotesize},stepnumber=1,tabsize=4"
inline false
status open

\begin_layout LyX-Code

function transform = tdf2dInv(matrix)
\end_layout

\begin_layout LyX-Code

	N = rows(matrix);
\end_layout

\begin_layout LyX-Code

	transform = [];
\end_layout

\begin_layout LyX-Code

	aux = i * 2 * pi / N;
\end_layout

\begin_layout LyX-Code

	for n = 1 : N
\end_layout

\begin_layout LyX-Code

		for m = 1 : N
\end_layout

\begin_layout LyX-Code

			transform(n, m) = 0;
\end_layout

\begin_layout LyX-Code

			for l = 1 : N
\end_layout

\begin_layout LyX-Code

				for k = 1 : N
\end_layout

\begin_layout LyX-Code

					c = e ** (aux * (n * l + m * k));
\end_layout

\begin_layout LyX-Code

					transform(n, m) += matrix(l, k) * c;
\end_layout

\begin_layout LyX-Code

			    endfor
\end_layout

\begin_layout LyX-Code

			endfor
\end_layout

\begin_layout LyX-Code

	    endfor
\end_layout

\begin_layout LyX-Code

	endfor
\end_layout

\begin_layout LyX-Code

	transform /= (N * N); 
\end_layout

\begin_layout LyX-Code

endfunction
\end_layout

\end_inset


\end_layout

\end_body
\end_document
